// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName  String?
  email     String  @unique
  hash      String

  role ROLE @default(STUDENT)

  Tests            Test[]
  QuestionAnswered QuestionAnswered[]
  TestFilled       TestFilled[]

  UpComingTests UpComingTest[]

  ParticipatingCourses CourseToUser[]
  OwnedCourses         Course[]

  @@map("users")
}

model Test {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId Int
  user    User @relation(fields: [ownerId], references: [id])

  title       String
  description String

  Questions     Question[]
  UpComingTests UpComingTest[]

  @@map("tests")
}

model Question {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  testId Int
  test   Test @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  Answers Answer[]

  text             String
  type             QuestionTypes      @default(SELECT_ONE)
  QuestionAnswered QuestionAnswered[]

  @@map("questions")
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  text  String
  point Float  @default(0)

  QuestionAnswered QuestionAnswered[]

  @@map("answers")
}

model TestFilled {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate DateTime  @default(now())
  endDate   DateTime?
  submitted Boolean   @default(false)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  upComingTestId Int
  upComingTest   UpComingTest @relation(fields: [upComingTestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model QuestionAnswered {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  upcomingTestId Int
  upcomingTest   UpComingTest @relation(fields: [upcomingTestId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  answerId Int
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UpComingTest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  testId Int
  test   Test @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  startDate     DateTime
  lastStartDate DateTime

  TestFilled       TestFilled[]
  QuestionAnswered QuestionAnswered[]

  @@map("upcomingtests")
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  Participants CourseToUser[]
  UpComingTest UpComingTest[]

  @@map("courses")
}

model CourseToUser {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, courseId])
}

enum QuestionTypes {
  SELECT_ONE
  SELECT_MORE
}

enum ROLE {
  ADMIN
  MODERATOR
  TEACHER
  STUDENT
}
