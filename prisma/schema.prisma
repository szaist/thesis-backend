// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName  String?
  email     String  @unique
  hash      String

  role ROLE @default(STUDENT)

  Tests                Test[]
  QuestionAnswered     QuestionAnswered[]
  TestFilled           TestFilled[]
  UsersToUpComingTests UsersToUpComingTests[]

  @@map("users")
}

model Test {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId  Int
  user     User       @relation(fields: [ownerId], references: [id])
  Question Question[]

  title        String
  description  String
  UpComingTest UpComingTest[]

  @@map("tests")
}

model Question {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  testId Int
  test   Test     @relation(fields: [testId], references: [id])
  Answer Answer[]

  text             String
  type             QuestionTypes      @default(SELECT_ONE)
  QuestionAnswered QuestionAnswered[]

  @@map("questions")
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  text             String
  correct          Boolean
  point            Float              @default(0)
  QuestionAnswered QuestionAnswered[]

  @@map("answers")
}

model TestFilled {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate DateTime @default(now())
  endDate   DateTime
  submitted Boolean  @default(false)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  upComingTestId Int
  upComingTest   UpComingTest @relation(fields: [upComingTestId], references: [id])
}

model QuestionAnswered {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  answerId Int
  answer   Answer @relation(fields: [answerId], references: [id])
}

model UpComingTest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  testId Int
  test   Test @relation(fields: [testId], references: [id])

  startDate            DateTime
  lastStartDate        DateTime
  UsersToUpComingTests UsersToUpComingTests[]
  TestFilled           TestFilled[]

  @@map("upcomingtests")
}

model UsersToUpComingTests {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  upComingTestId Int
  upComingTest   UpComingTest @relation(fields: [upComingTestId], references: [id])
}

enum QuestionTypes {
  CHECKBOX
  SIMPLE_ANSWER
  EXPLAIN_ANSWER
  SELECT_ONE
}

enum ROLE {
  ADMIN
  MODERATOR
  TEACHER
  STUDENT
}
